{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lead Analytics Dashboard","text":"<p>Bienvenue dans la documentation du Lead Analytics Dashboard, une application compl\u00e8te d'analyse de leads avec un dashboard moderne.</p>"},{"location":"#vue-densemble","title":"\ud83c\udfaf Vue d'ensemble","text":"<p>Lead Analytics Dashboard est une application full-stack permettant de suivre et analyser les \u00e9v\u00e9nements commerciaux :</p> <ul> <li>\ud83d\udcde Prises de contact</li> <li>\ud83d\udcc5 Appels book\u00e9s et propos\u00e9s</li> <li>\ud83d\udd04 Relances</li> <li>\ud83d\udcac R\u00e9ponses prospects</li> </ul>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":""},{"location":"#backend","title":"Backend","text":"<ul> <li>FastAPI : Framework web moderne et performant</li> <li>DuckDB : Moteur SQL analytique pour les agr\u00e9gations</li> <li>Delta Lake : Format de stockage de donn\u00e9es versionn\u00e9 et optimis\u00e9</li> <li>Python 3.13 : Derni\u00e8re version stable de Python</li> <li>uv : Gestionnaire de d\u00e9pendances ultra-rapide</li> </ul>"},{"location":"#frontend","title":"Frontend","text":"<ul> <li>Next.js 16 : Framework React avec App Router</li> <li>React 19 : Derni\u00e8re version de React</li> <li>Tailwind CSS : Framework CSS utility-first</li> <li>Recharts : Biblioth\u00e8que de graphiques pour React</li> <li>shadcn/ui : Composants UI modernes et accessibles</li> </ul>"},{"location":"#fonctionnalites-principales","title":"\u2728 Fonctionnalit\u00e9s principales","text":""},{"location":"#visualisation-des-donnees","title":"Visualisation des donn\u00e9es","text":"<ul> <li>\ud83d\udcca Graphiques interactifs des \u00e9v\u00e9nements par semaine et par mois</li> <li>\ud83d\udcc8 Tableaux de suivi des objectifs</li> <li>\ud83d\udd04 Analyse des ratios de conversion</li> <li>\ud83d\udcf1 Interface responsive et moderne</li> </ul>"},{"location":"#analyse-temporelle","title":"Analyse temporelle","text":"<ul> <li>Agr\u00e9gations hebdomadaires avec <code>DATE_TRUNC</code></li> <li>Agr\u00e9gations mensuelles</li> <li>Unpivot des colonnes de dates pour analyse multi-\u00e9v\u00e9nements</li> <li>Requ\u00eates SQL optimis\u00e9es avec DuckDB</li> </ul>"},{"location":"#architecture-technique","title":"Architecture technique","text":"<ul> <li>API REST avec documentation OpenAPI automatique</li> <li>Gestion s\u00e9curis\u00e9e des secrets (pas d'ARG Docker)</li> <li>Build multi-stage optimis\u00e9</li> <li>Health checks configur\u00e9s</li> <li>Hot-reload en d\u00e9veloppement</li> </ul>"},{"location":"#demarrage-rapide","title":"\ud83d\ude80 D\u00e9marrage rapide","text":"<p>Deux options disponibles</p> <p>Vous pouvez lancer l'application en d\u00e9veloppement local ou via Docker.</p>"},{"location":"#option-1-docker-recommande","title":"Option 1 : Docker (Recommand\u00e9)","text":"<pre><code># Cr\u00e9er le fichier .env\ncat &gt; .env &lt;&lt; EOF\nNOTION_TOKEN=votre_token\nDATABASE_ID=votre_database_id\nEOF\n\n# Build et d\u00e9marrage\nmake docker-deploy\n</code></pre>"},{"location":"#option-2-developpement-local","title":"Option 2 : D\u00e9veloppement local","text":"<pre><code># Backend\nmake install\nuv run uvicorn backend.app:app --reload\n\n# Frontend (nouveau terminal)\ncd frontend &amp;&amp; pnpm install &amp;&amp; pnpm dev\n</code></pre>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Guide d'installation</li> <li>Configuration</li> <li>Docker</li> <li>API Backend</li> <li>Architecture</li> </ul>"},{"location":"#contribution","title":"\ud83e\udd1d Contribution","text":"<p>Les contributions sont les bienvenues ! Consultez le guide de contribution pour plus d'informations.</p>"},{"location":"#license","title":"\ud83d\udcdd License","text":"<p>Ce projet est sous licence MIT. Voir le fichier LICENSE pour plus de d\u00e9tails.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Ce document d\u00e9crit l'architecture compl\u00e8te de l'application Lead Analytics Dashboard.</p>"},{"location":"architecture/#vue-densemble","title":"Vue d'ensemble","text":"<pre><code>graph TB\n    User[\ud83d\udc64 Utilisateur] --&gt;|HTTPS| Frontend[\ud83c\udf10 Frontend Next.js]\n    Frontend --&gt;|REST API| Backend[\u2699\ufe0f Backend FastAPI]\n    Backend --&gt;|SQL| DuckDB[(\ud83e\udd86 DuckDB)]\n    Backend --&gt;|Read/Write| DeltaLake[\ud83d\udcbe Delta Lake]\n    Notion[\ud83d\udcdd Notion] --&gt;|Sync| Backend\n\n    style Frontend fill:#61dafb\n    style Backend fill:#009688\n    style DuckDB fill:#ffd700\n    style DeltaLake fill:#ff6b6b</code></pre>"},{"location":"architecture/#stack-technique","title":"Stack technique","text":""},{"location":"architecture/#frontend","title":"Frontend","text":"<ul> <li>Framework : Next.js 16 avec App Router</li> <li>UI Library : React 19</li> <li>Styling : Tailwind CSS + shadcn/ui</li> <li>Graphiques : Recharts</li> <li>HTTP Client : Axios</li> <li>Package Manager : pnpm</li> </ul> <p>Caract\u00e9ristiques : - Server-Side Rendering (SSR) - Client-Side Rendering (CSR) pour les composants interactifs - Optimisation automatique des images - Code splitting automatique - Hot Module Replacement (HMR)</p>"},{"location":"architecture/#backend","title":"Backend","text":"<ul> <li>Framework : FastAPI 0.120</li> <li>Base de donn\u00e9es analytique : DuckDB 1.4</li> <li>Stockage : Delta Lake 1.2</li> <li>Package Manager : uv</li> <li>Python : 3.13</li> </ul> <p>Caract\u00e9ristiques : - API REST asynchrone - Documentation OpenAPI automatique - Validation Pydantic - CORS configur\u00e9 - Logging structur\u00e9 (Loguru)</p>"},{"location":"architecture/#stockage-des-donnees","title":"Stockage des donn\u00e9es","text":"<ul> <li>Format : Delta Lake (Parquet + transaction log)</li> <li>Compression : Snappy</li> <li>Localisation : <code>backend/data_leads/</code></li> </ul> <p>Avantages : - ACID transactions - Time travel - Schema evolution - Versioning automatique - Lecture optimis\u00e9e</p>"},{"location":"architecture/#architecture-backend","title":"Architecture Backend","text":""},{"location":"architecture/#structure-des-modules","title":"Structure des modules","text":"<pre><code>backend/\n\u251c\u2500\u2500 app.py                      # Point d'entr\u00e9e FastAPI\n\u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 config.py              # Configuration globale\n\u2502   \u2514\u2500\u2500 openapi_docs_model.py  # Mod\u00e8les OpenAPI\n\u2514\u2500\u2500 routers/\n    \u251c\u2500\u2500 ingestion_leads/       # Ingestion des donn\u00e9es\n    \u2502   \u251c\u2500\u2500 main.py           # Routes d'ingestion\n    \u2502   \u251c\u2500\u2500 model.py          # Mod\u00e8les Pydantic\n    \u2502   \u251c\u2500\u2500 utils.py          # Utilitaires\n    \u2502   \u2514\u2500\u2500 docs.py           # Documentation OpenAPI\n    \u2514\u2500\u2500 transformation/        # Transformations analytiques\n        \u251c\u2500\u2500 main.py           # Routes de transformation\n        \u251c\u2500\u2500 docs.py           # Documentation OpenAPI\n        \u2514\u2500\u2500 request/          # Requ\u00eates SQL\n            \u251c\u2500\u2500 count_by_week_form_deltalake.sql\n            \u2514\u2500\u2500 count_by_month_form_deltalake.sql\n</code></pre>"},{"location":"architecture/#flow-de-donnees","title":"Flow de donn\u00e9es","text":"<pre><code>sequenceDiagram\n    participant F as Frontend\n    participant API as FastAPI\n    participant DB as DuckDB\n    participant DL as Delta Lake\n\n    F-&gt;&gt;API: GET /api/v1/transformation/count_date_by_week\n    API-&gt;&gt;DB: Ouvrir connexion\n    DB-&gt;&gt;DL: DELTA_SCAN(data_leads)\n    DL--&gt;&gt;DB: Donn\u00e9es brutes\n    DB-&gt;&gt;DB: UNPIVOT dates\n    DB-&gt;&gt;DB: DATE_TRUNC('week', date)\n    DB-&gt;&gt;DB: PIVOT type_evenement\n    DB-&gt;&gt;DB: GROUP BY semaine\n    DB--&gt;&gt;API: R\u00e9sultats agr\u00e9g\u00e9s\n    API--&gt;&gt;F: JSON Response</code></pre>"},{"location":"architecture/#requetes-sql","title":"Requ\u00eates SQL","text":""},{"location":"architecture/#agregation-par-semaine","title":"Agr\u00e9gation par semaine","text":"<pre><code>WITH unpivoted_and_weekly AS (\n  SELECT\n    DATE_TRUNC('week', date) AS semaine,\n    type_evenement,\n    date\n  FROM (\n    UNPIVOT DELTA_SCAN('/path/to/data_leads')\n    ON date_appel_booke,\n       date_appel_propose,\n       date_prise_contact,\n       date_relance,\n       date_reponse_prospect\n    INTO\n    NAME type_evenement\n    VALUE date\n  )\n  WHERE date IS NOT NULL\n)\nPIVOT unpivoted_and_weekly\nON type_evenement\nUSING COUNT(date)\nGROUP BY semaine\nORDER BY semaine;\n</code></pre> <p>\u00c9tapes : 1. DELTA_SCAN : Lecture directe du format Delta Lake 2. UNPIVOT : Transformation des colonnes en lignes 3. DATE_TRUNC : Troncature au d\u00e9but de la semaine 4. PIVOT : Retransformation en colonnes par type d'\u00e9v\u00e9nement 5. COUNT : Comptage des occurrences 6. GROUP BY : Agr\u00e9gation par semaine</p>"},{"location":"architecture/#architecture-frontend","title":"Architecture Frontend","text":""},{"location":"architecture/#structure-des-composants","title":"Structure des composants","text":"<pre><code>frontend/src/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 layout.tsx            # Layout global\n\u2502   \u2514\u2500\u2500 page.tsx              # Page d'accueil (dashboard)\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 leads-analytics-chart.tsx         # Graphique principal\n\u2502   \u251c\u2500\u2500 monthly-objectives-table.tsx      # Objectifs mensuels\n\u2502   \u251c\u2500\u2500 weekly-objectives-table.tsx       # Objectifs hebdomadaires\n\u2502   \u251c\u2500\u2500 conversion-ratios-table.tsx       # Ratios de conversion\n\u2502   \u251c\u2500\u2500 app-sidebar.tsx                   # Sidebar de navigation\n\u2502   \u2514\u2500\u2500 ui/                               # Composants UI r\u00e9utilisables\n\u2502       \u251c\u2500\u2500 button.tsx\n\u2502       \u251c\u2500\u2500 card.tsx\n\u2502       \u251c\u2500\u2500 chart.tsx\n\u2502       \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 lib/\n\u2502   \u251c\u2500\u2500 api.ts                # Client API Axios\n\u2502   \u2514\u2500\u2500 utils.ts              # Utilitaires\n\u2514\u2500\u2500 config/\n    \u2514\u2500\u2500 navigation.ts         # Configuration navigation\n</code></pre>"},{"location":"architecture/#flow-de-rendu","title":"Flow de rendu","text":"<pre><code>graph LR\n    A[page.tsx] --&gt; B[LeadsAnalyticsChart]\n    A --&gt; C[MonthlyObjectivesTable]\n    A --&gt; D[WeeklyObjectivesTable]\n    A --&gt; E[ConversionRatiosTable]\n\n    B --&gt; F[API: /count_date_by_week]\n    C --&gt; G[API: /count_date_by_month]\n    D --&gt; F\n    E --&gt; F\n    E --&gt; G\n\n    style A fill:#61dafb\n    style B fill:#90ee90\n    style C fill:#90ee90\n    style D fill:#90ee90\n    style E fill:#90ee90</code></pre>"},{"location":"architecture/#client-api","title":"Client API","text":"<pre><code>// lib/api.ts\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n\nexport const api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const getWeeklyEventCounts = async (): Promise&lt;WeeklyEventCount[]&gt; =&gt; {\n  const response = await api.get('/api/v1/transformation/count_date_by_week');\n  return response.data;\n};\n</code></pre>"},{"location":"architecture/#deploiement-docker","title":"D\u00e9ploiement Docker","text":""},{"location":"architecture/#architecture-multi-conteneurs","title":"Architecture multi-conteneurs","text":"<pre><code>graph TB\n    subgraph \"Docker Network\"\n        Backend[\ud83d\udc33 Backend Container&lt;br/&gt;Python 3.13]\n        Frontend[\ud83d\udc33 Frontend Container&lt;br/&gt;Node.js 20]\n    end\n\n    subgraph \"Volumes\"\n        Data[\ud83d\udce6 data_leads/&lt;br/&gt;Delta Lake]\n    end\n\n    Frontend --&gt;|HTTP :8000| Backend\n    Backend --&gt;|Mount| Data\n\n    User[\ud83d\udc64 Client] --&gt;|:3000| Frontend\n    User --&gt;|:8000/docs| Backend\n\n    style Backend fill:#009688\n    style Frontend fill:#61dafb\n    style Data fill:#ff6b6b</code></pre>"},{"location":"architecture/#images-docker","title":"Images Docker","text":""},{"location":"architecture/#backend_1","title":"Backend","text":"<ul> <li>Base : <code>python:3.13-slim</code></li> <li>Taille : ~500MB</li> <li>Build : Single-stage avec uv</li> <li>Port : 8000</li> </ul>"},{"location":"architecture/#frontend_1","title":"Frontend","text":"<ul> <li>Base : <code>node:20-alpine</code></li> <li>Taille : ~150MB</li> <li>Build : Multi-stage (deps, builder, runner)</li> <li>Port : 3000</li> </ul>"},{"location":"architecture/#reseau","title":"R\u00e9seau","text":"<pre><code>networks:\n  dataascode-network:\n    driver: bridge\n</code></pre> <p>Les conteneurs communiquent via un r\u00e9seau bridge isol\u00e9.</p>"},{"location":"architecture/#securite","title":"S\u00e9curit\u00e9","text":""},{"location":"architecture/#gestion-des-secrets","title":"Gestion des secrets","text":"<pre><code>graph LR\n    A[.env file] --&gt; B[docker-compose.yml]\n    B --&gt; C[Environment Variables]\n    C --&gt; D[Backend Runtime]\n\n    style A fill:#ff6b6b\n    style B fill:#ffd700\n    style C fill:#90ee90\n    style D fill:#009688</code></pre> <p>Bonnes pratiques : - \u2705 Secrets pass\u00e9s via ENV au runtime - \u2705 <code>.env</code> dans <code>.gitignore</code> - \u2705 Utilisateur non-root dans les conteneurs - \u274c Jamais d'ARG pour les secrets - \u274c Jamais de commit de secrets</p>"},{"location":"architecture/#cors","title":"CORS","text":"<p>Le backend autorise les requ\u00eates du frontend :</p> <pre><code>app.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n</code></pre>"},{"location":"architecture/#performance","title":"Performance","text":""},{"location":"architecture/#backend_2","title":"Backend","text":"<ul> <li>Temps de r\u00e9ponse : 30-100ms</li> <li>Concurrence : Asynchrone avec asyncio</li> <li>Connexion DB : Pool de connexions</li> </ul>"},{"location":"architecture/#frontend_2","title":"Frontend","text":"<ul> <li>First Contentful Paint : &lt; 1.5s</li> <li>Time to Interactive : &lt; 3.5s</li> <li>Bundle size : Optimis\u00e9 avec code splitting</li> </ul>"},{"location":"architecture/#optimisations","title":"Optimisations","text":"<ul> <li>Compression Snappy (Delta Lake)</li> <li>Index sur les colonnes de dates</li> <li>Mise en cache HTTP (\u00e0 impl\u00e9menter)</li> <li>CDN pour les assets statiques (production)</li> </ul>"},{"location":"architecture/#monitoring","title":"Monitoring","text":""},{"location":"architecture/#logs","title":"Logs","text":"<ul> <li>Backend : Loguru avec format structur\u00e9</li> <li>Frontend : Console logs (Next.js)</li> <li>Docker : <code>docker logs -f &lt;container&gt;</code></li> </ul>"},{"location":"architecture/#health-checks","title":"Health Checks","text":"<pre><code>healthcheck:\n  test: [\"CMD\", \"wget\", \"--spider\", \"http://localhost:8000/docs\"]\n  interval: 30s\n  timeout: 10s\n  retries: 3\n</code></pre>"},{"location":"architecture/#evolutivite","title":"\u00c9volutivit\u00e9","text":""},{"location":"architecture/#horizontale","title":"Horizontale","text":"<ul> <li>\u2611\ufe0f Backend : Scalable avec load balancer</li> <li>\u2611\ufe0f Frontend : D\u00e9ploiement CDN</li> <li>\u2610 Base de donn\u00e9es : \u00c0 migrer vers PostgreSQL + TimescaleDB</li> </ul>"},{"location":"architecture/#verticale","title":"Verticale","text":"<ul> <li>Augmentation des ressources CPU/RAM</li> <li>Optimisation des requ\u00eates SQL</li> <li>Indexation suppl\u00e9mentaire</li> </ul>"},{"location":"architecture/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<ul> <li>API Backend : Utiliser l'API</li> <li>Modules : Documentation des modules</li> <li>Installation : Installer l'application</li> </ul>"},{"location":"modules/","title":"Modules Backend","text":"<p>Cette page documente les modules Python du backend de l'application.</p>"},{"location":"modules/#structure-des-modules","title":"Structure des modules","text":"<p>Le backend est organis\u00e9 en plusieurs modules :</p> <pre><code>backend/\n\u251c\u2500\u2500 app.py                      # Point d'entr\u00e9e FastAPI\n\u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 config.py              # Configuration globale\n\u2502   \u2514\u2500\u2500 openapi_docs_model.py  # Mod\u00e8les OpenAPI\n\u2514\u2500\u2500 routers/\n    \u251c\u2500\u2500 ingestion_leads/       # Ingestion des donn\u00e9es\n    \u2502   \u251c\u2500\u2500 main.py           # Routes d'ingestion\n    \u2502   \u251c\u2500\u2500 model.py          # Mod\u00e8les Pydantic\n    \u2502   \u251c\u2500\u2500 utils.py          # Utilitaires\n    \u2502   \u2514\u2500\u2500 docs.py           # Documentation OpenAPI\n    \u2514\u2500\u2500 transformation/        # Transformations analytiques\n        \u251c\u2500\u2500 main.py           # Routes de transformation\n        \u2514\u2500\u2500 docs.py           # Documentation OpenAPI\n</code></pre>"},{"location":"modules/#application-principale","title":"Application principale","text":""},{"location":"modules/#backendapp","title":"<code>backend.app</code>","text":"<p>Point d'entr\u00e9e de l'application FastAPI.</p> <p>Fonctions principales :</p> <ul> <li>Configuration de l'application FastAPI</li> <li>Enregistrement des routers</li> <li>Configuration CORS</li> <li>Documentation OpenAPI</li> </ul> <p>Exemple d'utilisation :</p> <pre><code>from backend.app import app\nimport uvicorn\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"modules/#configuration","title":"Configuration","text":""},{"location":"modules/#backendcoreconfig","title":"<code>backend.core.config</code>","text":"<p>Contient la configuration globale de l'application.</p> <p>Variables de configuration :</p> <ul> <li>Param\u00e8tres de connexion Notion</li> <li>Configuration de la base de donn\u00e9es</li> <li>Param\u00e8tres de logging</li> <li>Configuration CORS</li> </ul>"},{"location":"modules/#backendcoreopenapi_docs_model","title":"<code>backend.core.openapi_docs_model</code>","text":"<p>Mod\u00e8les Pydantic pour la documentation OpenAPI.</p> <p>Mod\u00e8les :</p> <ul> <li>Sch\u00e9mas de r\u00e9ponse API</li> <li>Mod\u00e8les de donn\u00e9es</li> <li>Documentation des endpoints</li> </ul>"},{"location":"modules/#routers","title":"Routers","text":""},{"location":"modules/#ingestion-des-leads","title":"Ingestion des leads","text":""},{"location":"modules/#backendroutersingestion_leadsmain","title":"<code>backend.routers.ingestion_leads.main</code>","text":"<p>Routes pour l'ingestion des donn\u00e9es de leads depuis Notion.</p> <p>Endpoints :</p> <ul> <li><code>POST /api/v1/ingestion/leads</code> : Ing\u00e9rer des leads</li> <li><code>GET /api/v1/ingestion/status</code> : Statut de l'ingestion</li> </ul> <p>Exemple :</p> <pre><code>@router.post(\"/leads\")\nasync def ingest_leads(leads: List[Lead]):\n    \"\"\"\n    Ing\u00e8re une liste de leads dans Delta Lake.\n\n    Args:\n        leads: Liste des leads \u00e0 ing\u00e9rer\n\n    Returns:\n        Statut de l'ingestion\n    \"\"\"\n    # Impl\u00e9mentation\n    pass\n</code></pre>"},{"location":"modules/#backendroutersingestion_leadsmodel","title":"<code>backend.routers.ingestion_leads.model</code>","text":"<p>Mod\u00e8les Pydantic pour les leads.</p> <p>Mod\u00e8les :</p> <pre><code>class Lead(BaseModel):\n    \"\"\"Mod\u00e8le d'un lead.\"\"\"\n\n    id: str\n    nom: str\n    email: Optional[str]\n    telephone: Optional[str]\n    date_prise_contact: Optional[datetime]\n    date_appel_booke: Optional[datetime]\n    date_appel_propose: Optional[datetime]\n    date_relance: Optional[datetime]\n    date_reponse_prospect: Optional[datetime]\n    statut: str\n</code></pre>"},{"location":"modules/#backendroutersingestion_leadsutils","title":"<code>backend.routers.ingestion_leads.utils</code>","text":"<p>Fonctions utilitaires pour l'ingestion.</p> <p>Fonctions :</p> <ul> <li><code>validate_lead()</code> : Valide un lead</li> <li><code>transform_notion_data()</code> : Transforme les donn\u00e9es Notion</li> <li><code>write_to_delta_lake()</code> : \u00c9crit dans Delta Lake</li> </ul>"},{"location":"modules/#transformation-des-donnees","title":"Transformation des donn\u00e9es","text":""},{"location":"modules/#backendrouterstransformationmain","title":"<code>backend.routers.transformation.main</code>","text":"<p>Routes pour les transformations et agr\u00e9gations de donn\u00e9es.</p> <p>Endpoints :</p>"},{"location":"modules/#get-apiv1transformationcount_date_by_week","title":"<code>GET /api/v1/transformation/count_date_by_week</code>","text":"<p>Retourne le nombre d'\u00e9v\u00e9nements par semaine.</p> <p>Param\u00e8tres : Aucun</p> <p>R\u00e9ponse :</p> <pre><code>[\n  {\n    \"semaine\": \"2025-W01\",\n    \"date_prise_contact\": 45,\n    \"date_reponse_prospect\": 32,\n    \"date_appel_booke\": 28,\n    \"date_appel_propose\": 35,\n    \"date_relance\": 40\n  }\n]\n</code></pre> <p>Impl\u00e9mentation :</p> <pre><code>@router.get(\"/count_date_by_week\")\nasync def count_date_by_week() -&gt; List[WeeklyEventCount]:\n    \"\"\"\n    Agr\u00e8ge les \u00e9v\u00e9nements par semaine.\n\n    Utilise une requ\u00eate SQL avec UNPIVOT pour transformer\n    les colonnes de dates en lignes, puis PIVOT pour recr\u00e9er\n    une colonne par type d'\u00e9v\u00e9nement.\n\n    Returns:\n        Liste des comptages par semaine\n\n    Example:\n        &gt;&gt;&gt; data = await count_date_by_week()\n        &gt;&gt;&gt; print(data[0].semaine)\n        \"2025-W01\"\n    \"\"\"\n    # Ex\u00e9cution de la requ\u00eate SQL\n    pass\n</code></pre>"},{"location":"modules/#get-apiv1transformationcount_date_by_month","title":"<code>GET /api/v1/transformation/count_date_by_month</code>","text":"<p>Retourne le nombre d'\u00e9v\u00e9nements par mois.</p> <p>Param\u00e8tres : Aucun</p> <p>R\u00e9ponse :</p> <pre><code>[\n  {\n    \"mois\": \"2025-01\",\n    \"date_prise_contact\": 180,\n    \"date_reponse_prospect\": 145,\n    \"date_appel_booke\": 120,\n    \"date_appel_propose\": 150,\n    \"date_relance\": 160\n  }\n]\n</code></pre> <p>Requ\u00eate SQL utilis\u00e9e :</p> <pre><code>WITH unpivoted_and_monthly AS (\n  SELECT\n    DATE_TRUNC('month', date) AS mois,\n    type_evenement,\n    date\n  FROM (\n    UNPIVOT DELTA_SCAN('/path/to/data_leads')\n    ON date_appel_booke,\n       date_appel_propose,\n       date_prise_contact,\n       date_relance,\n       date_reponse_prospect\n    INTO\n    NAME type_evenement\n    VALUE date\n  )\n  WHERE date IS NOT NULL\n)\nPIVOT unpivoted_and_monthly\nON type_evenement\nUSING COUNT(date)\nGROUP BY mois\nORDER BY mois;\n</code></pre>"},{"location":"modules/#format-des-docstrings","title":"Format des docstrings","text":"<p>Le projet utilise le format Google pour les docstrings :</p> <pre><code>def exemple_fonction(param1: str, param2: int) -&gt; bool:\n    \"\"\"\n    Br\u00e8ve description de la fonction.\n\n    Description d\u00e9taill\u00e9e optionnelle de ce que fait\n    la fonction.\n\n    Args:\n        param1: Description du premier param\u00e8tre\n        param2: Description du second param\u00e8tre\n\n    Returns:\n        Description de ce qui est retourn\u00e9\n\n    Raises:\n        ValueError: Si param2 est n\u00e9gatif\n\n    Example:\n        &gt;&gt;&gt; resultat = exemple_fonction(\"test\", 42)\n        &gt;&gt;&gt; print(resultat)\n        True\n    \"\"\"\n    if param2 &lt; 0:\n        raise ValueError(\"param2 doit \u00eatre positif\")\n    return len(param1) &gt; param2\n</code></pre>"},{"location":"modules/#dependances","title":"D\u00e9pendances","text":"<p>Le backend utilise les d\u00e9pendances suivantes :</p> <ul> <li>FastAPI : Framework web</li> <li>DuckDB : Base de donn\u00e9es analytique</li> <li>Delta Lake : Format de stockage</li> <li>Pydantic : Validation de donn\u00e9es</li> <li>Loguru : Logging structur\u00e9</li> <li>uvicorn : Serveur ASGI</li> </ul> <p>Pour plus d'informations sur l'API, consultez la documentation API.</p>"},{"location":"api/overview/","title":"API Backend","text":"<p>L'API backend est construite avec FastAPI et fournit des endpoints pour l'ingestion et la transformation des donn\u00e9es de leads.</p>"},{"location":"api/overview/#documentation-interactive","title":"Documentation interactive","text":"<p>L'API dispose d'une documentation interactive Swagger/OpenAPI accessible une fois le serveur lanc\u00e9 :</p> <ul> <li>Swagger UI : http://localhost:8000/docs</li> <li>ReDoc : http://localhost:8000/redoc</li> <li>OpenAPI JSON : http://localhost:8000/openapi.json</li> </ul>"},{"location":"api/overview/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000\n</code></pre> <p>En production, remplacez par votre domaine.</p>"},{"location":"api/overview/#routes-disponibles","title":"Routes disponibles","text":""},{"location":"api/overview/#racine","title":"Racine","text":"<pre><code>GET /\n</code></pre> <p>Retourne des informations sur l'API.</p> <p>R\u00e9ponse : <pre><code>{\n  \"message\": \"Lead Analytics API\",\n  \"version\": \"0.0.1\",\n  \"docs\": \"/docs\"\n}\n</code></pre></p>"},{"location":"api/overview/#transformation-comptage-par-semaine","title":"Transformation - Comptage par semaine","text":"<pre><code>GET /api/v1/transformation/count_date_by_week\n</code></pre> <p>Retourne le nombre d'\u00e9v\u00e9nements agr\u00e9g\u00e9s par semaine.</p> <p>R\u00e9ponse : <pre><code>[\n  {\n    \"semaine\": \"2025-W01\",\n    \"date_prise_contact\": 45,\n    \"date_reponse_prospect\": 32,\n    \"date_appel_booke\": 28,\n    \"date_appel_propose\": 35,\n    \"date_relance\": 40\n  }\n]\n</code></pre></p> <p>\u00c9v\u00e9nements suivis : - <code>date_prise_contact</code> : Premi\u00e8re prise de contact avec le lead - <code>date_reponse_prospect</code> : R\u00e9ponse du prospect - <code>date_appel_booke</code> : Appel effectivement r\u00e9alis\u00e9 - <code>date_appel_propose</code> : Appel propos\u00e9 au prospect - <code>date_relance</code> : Relance du prospect</p>"},{"location":"api/overview/#transformation-comptage-par-mois","title":"Transformation - Comptage par mois","text":"<pre><code>GET /api/v1/transformation/count_date_by_month\n</code></pre> <p>Retourne le nombre d'\u00e9v\u00e9nements agr\u00e9g\u00e9s par mois.</p> <p>R\u00e9ponse : <pre><code>[\n  {\n    \"mois\": \"2025-01\",\n    \"date_prise_contact\": 180,\n    \"date_reponse_prospect\": 145,\n    \"date_appel_booke\": 120,\n    \"date_appel_propose\": 150,\n    \"date_relance\": 160\n  }\n]\n</code></pre></p>"},{"location":"api/overview/#architecture-sql","title":"Architecture SQL","text":""},{"location":"api/overview/#requetes-duckdb","title":"Requ\u00eates DuckDB","text":"<p>L'API utilise DuckDB pour des agr\u00e9gations performantes sur Delta Lake :</p> <pre><code>WITH unpivoted_and_weekly AS (\n  SELECT\n    DATE_TRUNC('week', date) AS semaine,\n    type_evenement,\n    date\n  FROM (\n    UNPIVOT DELTA_SCAN('/path/to/data_leads')\n    ON date_appel_booke,\n       date_appel_propose,\n       date_prise_contact,\n       date_relance,\n       date_reponse_prospect\n    INTO\n    NAME type_evenement\n    VALUE date\n  )\n  WHERE date IS NOT NULL\n)\nPIVOT unpivoted_and_weekly\nON type_evenement\nUSING COUNT(date)\nGROUP BY semaine\nORDER BY semaine;\n</code></pre> <p>Op\u00e9rations : 1. UNPIVOT : Transforme les colonnes de dates en lignes 2. DATE_TRUNC : Agr\u00e8ge par semaine ou mois 3. PIVOT : Recr\u00e9e une colonne par type d'\u00e9v\u00e9nement 4. COUNT : Compte les \u00e9v\u00e9nements par p\u00e9riode</p>"},{"location":"api/overview/#delta-lake","title":"Delta Lake","text":"<p>Les donn\u00e9es sont stock\u00e9es au format Delta Lake :</p> <ul> <li>Versioning des donn\u00e9es</li> <li>Time travel</li> <li>ACID transactions</li> <li>Schema evolution</li> <li>Compression Snappy</li> </ul>"},{"location":"api/overview/#format-des-dates","title":"Format des dates","text":"<p>Toutes les dates suivent le format ISO 8601 :</p> <ul> <li>Semaine : <code>YYYY-Www</code> (ex: <code>2025-W01</code>)</li> <li>Mois : <code>YYYY-MM</code> (ex: <code>2025-01</code>)</li> <li>Date compl\u00e8te : <code>YYYY-MM-DD</code> (ex: <code>2025-01-15</code>)</li> </ul>"},{"location":"api/overview/#codes-de-statut-http","title":"Codes de statut HTTP","text":"Code Signification 200 Succ\u00e8s 400 Erreur de requ\u00eate (param\u00e8tres invalides) 404 Ressource non trouv\u00e9e 500 Erreur serveur interne"},{"location":"api/overview/#erreurs","title":"Erreurs","text":"<p>Format des erreurs :</p> <pre><code>{\n  \"detail\": \"Description de l'erreur\"\n}\n</code></pre>"},{"location":"api/overview/#cors","title":"CORS","text":"<p>Le backend accepte les requ\u00eates CORS de toutes les origines en d\u00e9veloppement. En production, configurez les origines autoris\u00e9es dans <code>backend/core/config.py</code>.</p>"},{"location":"api/overview/#exemples-dutilisation","title":"Exemples d'utilisation","text":""},{"location":"api/overview/#curl","title":"cURL","text":"<pre><code># Comptage par semaine\ncurl http://localhost:8000/api/v1/transformation/count_date_by_week\n\n# Comptage par mois\ncurl http://localhost:8000/api/v1/transformation/count_date_by_month\n</code></pre>"},{"location":"api/overview/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:8000',\n});\n\n// R\u00e9cup\u00e9rer les donn\u00e9es hebdomadaires\nconst weeklyData = await api.get('/api/v1/transformation/count_date_by_week');\nconsole.log(weeklyData.data);\n\n// R\u00e9cup\u00e9rer les donn\u00e9es mensuelles\nconst monthlyData = await api.get('/api/v1/transformation/count_date_by_month');\nconsole.log(monthlyData.data);\n</code></pre>"},{"location":"api/overview/#python","title":"Python","text":"<pre><code>import httpx\n\nasync with httpx.AsyncClient() as client:\n    response = await client.get(\n        \"http://localhost:8000/api/v1/transformation/count_date_by_week\"\n    )\n    data = response.json()\n    print(data)\n</code></pre>"},{"location":"api/overview/#performance","title":"Performance","text":""},{"location":"api/overview/#temps-de-reponse-typiques","title":"Temps de r\u00e9ponse typiques","text":"<ul> <li>Comptage par semaine : ~50-100ms</li> <li>Comptage par mois : ~30-80ms</li> </ul>"},{"location":"api/overview/#optimisations","title":"Optimisations","text":"<ul> <li>Utilisation de DuckDB pour les agr\u00e9gations SQL</li> <li>Format Delta Lake avec compression Snappy</li> <li>Requ\u00eates SQL optimis\u00e9es avec UNPIVOT/PIVOT</li> <li>Pas de cache (temps r\u00e9el)</li> </ul>"},{"location":"api/overview/#logging","title":"Logging","text":"<p>L'API utilise <code>loguru</code> pour des logs structur\u00e9s :</p> <pre><code>from loguru import logger\n\nlogger.info(f\"\ud83d\udcab columns to aggregate {columns}\")\n</code></pre> <p>Les logs incluent : - Timestamp - Niveau (INFO, WARNING, ERROR) - Module et fonction - Message avec emojis pour la lisibilit\u00e9</p>"},{"location":"api/overview/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<ul> <li>Modules Backend : Documentation d\u00e9taill\u00e9e des modules</li> <li>Architecture : Comprendre l'architecture compl\u00e8te</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Ce guide explique comment configurer l'application avec les variables d'environnement n\u00e9cessaires.</p>"},{"location":"getting-started/configuration/#variables-denvironnement","title":"Variables d'environnement","text":"<p>L'application utilise des variables d'environnement pour la configuration. Les donn\u00e9es sensibles ne doivent jamais \u00eatre committ\u00e9es dans le code.</p>"},{"location":"getting-started/configuration/#backend","title":"Backend","text":"<p>Le backend n\u00e9cessite les variables suivantes :</p> Variable Description Requis Exemple <code>NOTION_TOKEN</code> Token d'authentification Notion Oui <code>secret_xxxxxxxxxxxxx</code> <code>DATABASE_ID</code> ID de la base de donn\u00e9es Notion Oui <code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code> <code>PYTHONUNBUFFERED</code> Mode non-bufferis\u00e9 Python Non <code>1</code>"},{"location":"getting-started/configuration/#frontend","title":"Frontend","text":"<p>Le frontend n\u00e9cessite la variable suivante au moment du build :</p> Variable Description Requis Valeur par d\u00e9faut <code>NEXT_PUBLIC_API_URL</code> URL de l'API backend Non <code>http://localhost:8000</code> <p>Variables NEXT_PUBLIC</p> <p>Les variables pr\u00e9fix\u00e9es par <code>NEXT_PUBLIC_</code> sont inject\u00e9es dans le code frontend au moment du build et sont visibles c\u00f4t\u00e9 client. Ne mettez jamais de secrets dans ces variables.</p>"},{"location":"getting-started/configuration/#configuration-pour-le-developpement-local","title":"Configuration pour le d\u00e9veloppement local","text":""},{"location":"getting-started/configuration/#creer-le-fichier-env","title":"Cr\u00e9er le fichier .env","text":"<p>Cr\u00e9ez un fichier <code>.env</code> \u00e0 la racine du projet :</p> <pre><code># .env\nNOTION_TOKEN=secret_xxxxxxxxxxxxx\nDATABASE_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n</code></pre> <p>Important</p> <p>Le fichier <code>.env</code> est d\u00e9j\u00e0 dans le <code>.gitignore</code>. Ne le committez jamais !</p>"},{"location":"getting-started/configuration/#backend_1","title":"Backend","text":"<p>Le backend charge automatiquement le fichier <code>.env</code> si vous utilisez <code>python-dotenv</code>.</p> <pre><code># Lancer le backend (charge automatiquement .env)\nuv run uvicorn backend.app:app --reload\n</code></pre>"},{"location":"getting-started/configuration/#frontend_1","title":"Frontend","text":"<p>Pour le frontend, cr\u00e9ez un fichier <code>.env.local</code> dans le dossier <code>frontend/</code> :</p> <pre><code># frontend/.env.local\nNEXT_PUBLIC_API_URL=http://localhost:8000\n</code></pre> <pre><code>cd frontend\npnpm dev  # Charge automatiquement .env.local\n</code></pre>"},{"location":"getting-started/configuration/#configuration-avec-docker","title":"Configuration avec Docker","text":""},{"location":"getting-started/configuration/#fichier-env-pour-docker-compose","title":"Fichier .env pour Docker Compose","text":"<p>Docker Compose lit automatiquement le fichier <code>.env</code> \u00e0 la racine :</p> <pre><code># .env (\u00e0 la racine)\nNOTION_TOKEN=secret_xxxxxxxxxxxxx\nDATABASE_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\nNEXT_PUBLIC_API_URL=http://localhost:8000\n</code></pre>"},{"location":"getting-started/configuration/#lancer-avec-docker","title":"Lancer avec Docker","text":"<pre><code>make docker-deploy\n</code></pre>"},{"location":"getting-started/configuration/#variables-en-ligne-de-commande","title":"Variables en ligne de commande","text":"<p>Vous pouvez aussi passer les variables directement :</p> <pre><code>NOTION_TOKEN=xxx DATABASE_ID=yyy docker-compose up\n</code></pre>"},{"location":"getting-started/configuration/#configuration-pour-la-production","title":"Configuration pour la production","text":""},{"location":"getting-started/configuration/#variables-denvironnement-via-build-args","title":"Variables d'environnement via build args","text":"<p>Pour le frontend en production, passez l'URL de l'API au build :</p> <pre><code>docker build \\\n  --build-arg NEXT_PUBLIC_API_URL=https://api.example.com \\\n  -f Dockerfile.frontend \\\n  -t frontend-prod .\n</code></pre>"},{"location":"getting-started/configuration/#secrets-docker","title":"Secrets Docker","text":"<p>Pour la production, utilisez Docker secrets plut\u00f4t que des variables d'environnement :</p> <pre><code># docker-compose.prod.yml\nservices:\n  backend:\n    secrets:\n      - notion_token\n      - database_id\n\nsecrets:\n  notion_token:\n    external: true\n  database_id:\n    external: true\n</code></pre>"},{"location":"getting-started/configuration/#gestionnaires-de-secrets","title":"Gestionnaires de secrets","text":"<p>Pour la production, consid\u00e9rez l'utilisation de :</p> <ul> <li>Docker Secrets : Pour Docker Swarm</li> <li>Kubernetes Secrets : Pour Kubernetes</li> <li>AWS Secrets Manager : Pour AWS</li> <li>Azure Key Vault : Pour Azure</li> <li>HashiCorp Vault : Solution multi-cloud</li> </ul>"},{"location":"getting-started/configuration/#obtenir-les-tokens-notion","title":"Obtenir les tokens Notion","text":""},{"location":"getting-started/configuration/#1-creer-une-integration-notion","title":"1. Cr\u00e9er une int\u00e9gration Notion","text":"<ol> <li>Aller sur https://www.notion.so/my-integrations</li> <li>Cliquer sur \"New integration\"</li> <li>Donner un nom \u00e0 votre int\u00e9gration</li> <li>Copier le \"Internal Integration Token\" \u2192 C'est votre <code>NOTION_TOKEN</code></li> </ol>"},{"location":"getting-started/configuration/#2-obtenir-lid-de-la-database","title":"2. Obtenir l'ID de la database","text":"<ol> <li>Ouvrir votre database dans Notion</li> <li>L'URL ressemble \u00e0 : <code>https://www.notion.so/xxxxxxxxxxxx?v=yyyyyyyy</code></li> <li>Le <code>xxxxxxxxxxxx</code> est votre <code>DATABASE_ID</code></li> </ol>"},{"location":"getting-started/configuration/#3-donner-acces-a-la-database","title":"3. Donner acc\u00e8s \u00e0 la database","text":"<ol> <li>Ouvrir votre database dans Notion</li> <li>Cliquer sur \"...\" en haut \u00e0 droite</li> <li>\"Add connections\" \u2192 S\u00e9lectionner votre int\u00e9gration</li> </ol>"},{"location":"getting-started/configuration/#validation-de-la-configuration","title":"Validation de la configuration","text":"<p>Pour v\u00e9rifier que votre configuration est correcte :</p> <pre><code># Backend\nuv run python -c \"import os; print('NOTION_TOKEN:', 'OK' if os.getenv('NOTION_TOKEN') else 'MISSING')\"\n\n# Test de connexion \u00e0 l'API\ncurl http://localhost:8000/docs\n</code></pre>"},{"location":"getting-started/configuration/#securite","title":"S\u00e9curit\u00e9","text":"<p>Bonnes pratiques de s\u00e9curit\u00e9</p> <ul> <li>\u2705 Utilisez <code>.env</code> pour le d\u00e9veloppement local</li> <li>\u2705 Ajoutez <code>.env</code> au <code>.gitignore</code></li> <li>\u2705 Utilisez des secrets managers en production</li> <li>\u2705 Rotez r\u00e9guli\u00e8rement les tokens</li> <li>\u274c Ne committez jamais de secrets dans Git</li> <li>\u274c N'utilisez jamais <code>ARG</code> pour les secrets dans Dockerfile</li> <li>\u274c Ne loggez jamais les secrets</li> </ul>"},{"location":"getting-started/configuration/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<ul> <li>Docker : D\u00e9ployer avec Docker</li> <li>API Backend : Utiliser l'API</li> </ul>"},{"location":"getting-started/docker/","title":"Guide Docker","text":"<p>Ce guide explique comment utiliser Docker pour d\u00e9velopper et d\u00e9ployer l'application.</p>"},{"location":"getting-started/docker/#architecture-docker","title":"Architecture Docker","text":"<p>L'application est compos\u00e9e de deux services containeris\u00e9s :</p> <ul> <li>Backend : API FastAPI (Python 3.13)</li> <li>Frontend : Application Next.js (Node.js 20)</li> </ul> <p>Les services communiquent via un r\u00e9seau Docker d\u00e9di\u00e9.</p>"},{"location":"getting-started/docker/#demarrage-rapide","title":"D\u00e9marrage rapide","text":""},{"location":"getting-started/docker/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>Docker 20.10+</li> <li>Docker Compose 2.0+</li> </ul>"},{"location":"getting-started/docker/#commandes-make","title":"Commandes Make","text":"<pre><code># Build et d\u00e9marrage (tout-en-un)\nmake docker-deploy\n\n# Ou \u00e9tape par \u00e9tape\nmake docker-build    # Build des images\nmake docker-up       # D\u00e9marrage des conteneurs\nmake docker-logs     # Voir les logs\nmake docker-down     # Arr\u00eat des conteneurs\n</code></pre>"},{"location":"getting-started/docker/#dockerfiles","title":"Dockerfiles","text":""},{"location":"getting-started/docker/#backend-dockerfilebackend","title":"Backend : <code>Dockerfile.backend</code>","text":"<pre><code>FROM python:3.13-slim\nCOPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv\n\nWORKDIR /app\nCOPY uv.lock pyproject.toml ./\nRUN uv sync --frozen --no-install-project\n\nCOPY . /app\nRUN uv sync --frozen\n\nENV PYTHONUNBUFFERED=1\nEXPOSE 8000\nCMD [\"uv\", \"run\", \"uvicorn\", \"backend.app:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--reload\"]\n</code></pre> <p>Caract\u00e9ristiques : - Image l\u00e9g\u00e8re <code>python:3.13-slim</code> - Utilisation de <code>uv</code> pour une installation rapide - Hot-reload activ\u00e9 en d\u00e9veloppement - Variables d'environnement pass\u00e9es au runtime (s\u00e9curis\u00e9)</p>"},{"location":"getting-started/docker/#frontend-dockerfilefrontend","title":"Frontend : <code>Dockerfile.frontend</code>","text":"<p>Build multi-stage pour optimiser la taille de l'image :</p> <ol> <li>Stage deps : Installation des d\u00e9pendances</li> <li>Stage builder : Build de l'application Next.js</li> <li>Stage runner : Image de production minimale</li> </ol> <p>Caract\u00e9ristiques : - Images Alpine l\u00e9g\u00e8res (~150MB final) - Utilisateur non-root pour la s\u00e9curit\u00e9 - Mode standalone Next.js - Variables <code>NEXT_PUBLIC_*</code> inject\u00e9es au build</p>"},{"location":"getting-started/docker/#docker-compose","title":"Docker Compose","text":""},{"location":"getting-started/docker/#configuration","title":"Configuration","text":"<pre><code>services:\n  backend:\n    build:\n      context: .\n      dockerfile: Dockerfile.backend\n    ports:\n      - \"8000:8000\"\n    environment:\n      - NOTION_TOKEN=${NOTION_TOKEN}\n      - DATABASE_ID=${DATABASE_ID}\n    volumes:\n      - ./backend/data_leads:/app/backend/data_leads\n\n  frontend:\n    build:\n      context: .\n      dockerfile: Dockerfile.frontend\n      args:\n        - NEXT_PUBLIC_API_URL=http://localhost:8000\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - backend\n</code></pre>"},{"location":"getting-started/docker/#services-disponibles","title":"Services disponibles","text":"<p>Une fois d\u00e9marr\u00e9s, les services sont accessibles sur :</p> <ul> <li>\ud83c\udf10 Frontend : http://localhost:3000</li> <li>\ud83d\udd0c Backend API : http://localhost:8000</li> <li>\ud83d\udcda Documentation API : http://localhost:8000/docs</li> </ul>"},{"location":"getting-started/docker/#variables-denvironnement","title":"Variables d'environnement","text":""},{"location":"getting-started/docker/#fichier-env","title":"Fichier .env","text":"<p>Cr\u00e9ez un fichier <code>.env</code> \u00e0 la racine :</p> <pre><code># .env\nNOTION_TOKEN=secret_xxxxxxxxxxxxx\nDATABASE_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n</code></pre> <p>Docker Compose charge automatiquement ce fichier.</p>"},{"location":"getting-started/docker/#build-args-vs-env","title":"Build args vs ENV","text":"<p>S\u00e9curit\u00e9</p> <ul> <li>\u2705 Utilisez <code>ENV</code> au runtime pour les secrets</li> <li>\u274c N'utilisez jamais <code>ARG</code> pour les secrets (visible dans l'historique Docker)</li> </ul> <p>Backend : Secrets pass\u00e9s via <code>environment</code> au runtime</p> <pre><code>environment:\n  - NOTION_TOKEN=${NOTION_TOKEN}  # \u2705 S\u00e9curis\u00e9\n</code></pre> <p>Frontend : URL de l'API pass\u00e9e via <code>build args</code> (pas de secret)</p> <pre><code>args:\n  - NEXT_PUBLIC_API_URL=http://localhost:8000  # \u2705 Pas de secret\n</code></pre>"},{"location":"getting-started/docker/#volumes-docker","title":"Volumes Docker","text":""},{"location":"getting-started/docker/#backend","title":"Backend","text":"<pre><code>volumes:\n  - ./backend/data_leads:/app/backend/data_leads\n</code></pre> <p>Le dossier <code>data_leads</code> (Delta Lake) est mont\u00e9 pour persister les donn\u00e9es entre les red\u00e9marrages.</p>"},{"location":"getting-started/docker/#frontend","title":"Frontend","text":"<p>Pas de volume n\u00e9cessaire car Next.js est compil\u00e9 dans l'image.</p>"},{"location":"getting-started/docker/#health-checks","title":"Health Checks","text":"<p>Les services ont des health checks configur\u00e9s :</p> <pre><code>healthcheck:\n  test: [\"CMD\", \"wget\", \"--no-verbose\", \"--tries=1\", \"--spider\", \"http://localhost:8000/docs\"]\n  interval: 30s\n  timeout: 10s\n  retries: 3\n  start_period: 40s\n</code></pre> <p>V\u00e9rifier le statut :</p> <pre><code>docker ps\ndocker inspect dataascode-backend | grep -A 10 Health\n</code></pre>"},{"location":"getting-started/docker/#reseaux","title":"R\u00e9seaux","text":"<p>Les services communiquent via un r\u00e9seau bridge d\u00e9di\u00e9 :</p> <pre><code>networks:\n  dataascode-network:\n    driver: bridge\n</code></pre>"},{"location":"getting-started/docker/#logs","title":"Logs","text":""},{"location":"getting-started/docker/#voir-les-logs","title":"Voir les logs","text":"<pre><code># Tous les services\nmake docker-logs\n\n# Service sp\u00e9cifique\ndocker logs dataascode-backend\ndocker logs dataascode-frontend\n\n# Follow mode\ndocker logs -f dataascode-backend\n</code></pre>"},{"location":"getting-started/docker/#logs-structures","title":"Logs structur\u00e9s","text":"<p>Le backend utilise <code>loguru</code> pour des logs structur\u00e9s :</p> <pre><code>2025-10-25 23:36:16.930 | INFO | backend.routers.transformation.main:count_date_by_week:36 - \ud83d\udcab columns to aggregate\n</code></pre>"},{"location":"getting-started/docker/#debugging","title":"Debugging","text":""},{"location":"getting-started/docker/#acceder-a-un-conteneur","title":"Acc\u00e9der \u00e0 un conteneur","text":"<pre><code># Backend\ndocker exec -it dataascode-backend /bin/sh\nuv run python\n\n# Frontend\ndocker exec -it dataascode-frontend /bin/sh\n</code></pre>"},{"location":"getting-started/docker/#rebuild-apres-modifications","title":"Rebuild apr\u00e8s modifications","text":"<pre><code># Rebuild complet\nmake docker-build\n\n# Rebuild sans cache\ndocker-compose build --no-cache\n\n# Rebuild un seul service\ndocker-compose build backend\n</code></pre>"},{"location":"getting-started/docker/#optimisations","title":"Optimisations","text":""},{"location":"getting-started/docker/#cache-docker","title":"Cache Docker","text":"<p>Les Dockerfiles utilisent des layers cach\u00e9s pour acc\u00e9l\u00e9rer les builds :</p> <ol> <li>Copie des fichiers de d\u00e9pendances d'abord</li> <li>Installation des d\u00e9pendances (mise en cache)</li> <li>Copie du code source (invalide le cache seulement si le code change)</li> </ol>"},{"location":"getting-started/docker/#dockerignore","title":".dockerignore","text":"<p>Des fichiers <code>.dockerignore</code> sp\u00e9cifiques excluent les fichiers inutiles :</p> <ul> <li><code>Dockerfile.backend.dockerignore</code> : Exclut <code>frontend/</code></li> <li><code>Dockerfile.frontend.dockerignore</code> : Exclut <code>backend/</code></li> </ul>"},{"location":"getting-started/docker/#taille-des-images","title":"Taille des images","text":"<pre><code># Voir la taille des images\ndocker images | grep dataascode\n\n# R\u00e9sultats typiques\ndataascode-backend    ~500MB\ndataascode-frontend   ~150MB\n</code></pre>"},{"location":"getting-started/docker/#production","title":"Production","text":""},{"location":"getting-started/docker/#build-pour-la-production","title":"Build pour la production","text":"<pre><code># Frontend avec URL API personnalis\u00e9e\ndocker-compose build \\\n  --build-arg NEXT_PUBLIC_API_URL=https://api.example.com \\\n  frontend\n</code></pre>"},{"location":"getting-started/docker/#docker-compose-production","title":"Docker Compose production","text":"<p>Cr\u00e9ez un <code>docker-compose.prod.yml</code> :</p> <pre><code>services:\n  backend:\n    restart: always\n    command: [\"uv\", \"run\", \"uvicorn\", \"backend.app:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n    # Sans --reload\n\n  frontend:\n    restart: always\n    environment:\n      - NODE_ENV=production\n</code></pre> <pre><code>docker-compose -f docker-compose.prod.yml up -d\n</code></pre>"},{"location":"getting-started/docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/docker/#port-deja-utilise","title":"Port d\u00e9j\u00e0 utilis\u00e9","text":"<pre><code># Erreur : bind: address already in use\n# Trouver le processus\nlsof -i :3000\nlsof -i :8000\n\n# Arr\u00eater le processus ou changer le port dans docker-compose.yml\n</code></pre>"},{"location":"getting-started/docker/#conteneur-ne-demarre-pas","title":"Conteneur ne d\u00e9marre pas","text":"<pre><code># Voir les logs d'erreur\ndocker logs dataascode-backend\n\n# V\u00e9rifier le statut\ndocker ps -a\n</code></pre>"},{"location":"getting-started/docker/#build-echoue","title":"Build \u00e9choue","text":"<pre><code># Rebuild sans cache\ndocker-compose build --no-cache\n\n# Nettoyer les images\ndocker system prune -a\n</code></pre>"},{"location":"getting-started/docker/#commandes-utiles","title":"Commandes utiles","text":"<pre><code># Statut des conteneurs\ndocker ps\n\n# Arr\u00eater tout\ndocker-compose down\n\n# Arr\u00eater et supprimer les volumes\ndocker-compose down -v\n\n# Nettoyer tout\ndocker system prune -a --volumes\n\n# Voir l'utilisation des ressources\ndocker stats\n</code></pre>"},{"location":"getting-started/docker/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<ul> <li>API Backend : Utiliser l'API</li> <li>Architecture : Comprendre l'architecture</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Ce guide vous explique comment installer et configurer l'environnement de d\u00e9veloppement.</p>"},{"location":"getting-started/installation/#prerequis","title":"Pr\u00e9requis","text":"<p>Avant de commencer, assurez-vous d'avoir install\u00e9 :</p> <ul> <li>Python 3.13+ : T\u00e9l\u00e9charger Python</li> <li>Node.js 20+ : T\u00e9l\u00e9charger Node.js</li> <li>pnpm : <code>npm install -g pnpm</code> ou <code>corepack enable</code></li> <li>uv : <code>curl -LsSf https://astral.sh/uv/install.sh | sh</code></li> <li>Docker &amp; Docker Compose (optionnel) : Installer Docker</li> </ul>"},{"location":"getting-started/installation/#installation-du-backend","title":"Installation du Backend","text":""},{"location":"getting-started/installation/#1-cloner-le-repository","title":"1. Cloner le repository","text":"<pre><code>git clone https://github.com/jojodataascode/dataascode.git\ncd dataascode\n</code></pre>"},{"location":"getting-started/installation/#2-installer-les-dependances-python","title":"2. Installer les d\u00e9pendances Python","text":"<pre><code># Installation avec uv (rapide)\nmake install\n\n# Ou manuellement\nuv sync\nuv run pre-commit install\n</code></pre> <p>Cette commande va :</p> <ul> <li>Cr\u00e9er un environnement virtuel <code>.venv</code></li> <li>Installer toutes les d\u00e9pendances Python</li> <li>Configurer les pre-commit hooks</li> </ul>"},{"location":"getting-started/installation/#3-verifier-linstallation","title":"3. V\u00e9rifier l'installation","text":"<pre><code># V\u00e9rifier que Python et les d\u00e9pendances sont bien install\u00e9s\nuv run python --version\nuv run uvicorn --version\n</code></pre>"},{"location":"getting-started/installation/#installation-du-frontend","title":"Installation du Frontend","text":""},{"location":"getting-started/installation/#1-naviguer-vers-le-dossier-frontend","title":"1. Naviguer vers le dossier frontend","text":"<pre><code>cd frontend\n</code></pre>"},{"location":"getting-started/installation/#2-installer-les-dependances-nodejs","title":"2. Installer les d\u00e9pendances Node.js","text":"<pre><code># Avec pnpm (recommand\u00e9)\npnpm install\n\n# Ou avec npm\nnpm install\n</code></pre>"},{"location":"getting-started/installation/#3-verifier-linstallation_1","title":"3. V\u00e9rifier l'installation","text":"<pre><code># V\u00e9rifier que Next.js est bien install\u00e9\npnpm next --version\n</code></pre>"},{"location":"getting-started/installation/#installation-avec-docker","title":"Installation avec Docker","text":"<p>Si vous pr\u00e9f\u00e9rez utiliser Docker :</p> <pre><code># Build des images\nmake docker-build\n\n# D\u00e9marrage des conteneurs\nmake docker-up\n</code></pre>"},{"location":"getting-started/installation/#structure-des-fichiers-apres-installation","title":"Structure des fichiers apr\u00e8s installation","text":"<pre><code>dataascode/\n\u251c\u2500\u2500 .venv/                    # Environnement virtuel Python\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 __pycache__/\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 node_modules/        # D\u00e9pendances Node.js\n\u2502   \u251c\u2500\u2500 .next/              # Build Next.js (apr\u00e8s pnpm dev)\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 uv.lock                  # Lock file des d\u00e9pendances Python\n</code></pre>"},{"location":"getting-started/installation/#commandes-utiles","title":"Commandes utiles","text":"<pre><code># V\u00e9rifier la qualit\u00e9 du code\nmake check\n\n# Lancer les tests\nmake test\n\n# Mettre \u00e0 jour les d\u00e9pendances\nuv sync\n\n# Backend\ncd backend &amp;&amp; uv run uvicorn backend.app:app --reload\n\n# Frontend\ncd frontend &amp;&amp; pnpm dev\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#erreur-uv-command-not-found","title":"Erreur : <code>uv: command not found</code>","text":"<p>Assurez-vous que uv est bien install\u00e9 et dans votre PATH :</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\nsource ~/.bashrc  # ou ~/.zshrc\n</code></pre>"},{"location":"getting-started/installation/#erreur-pnpm-command-not-found","title":"Erreur : <code>pnpm: command not found</code>","text":"<p>Installez pnpm globalement :</p> <pre><code>npm install -g pnpm\n# ou\ncorepack enable\n</code></pre>"},{"location":"getting-started/installation/#erreur-de-permissions-python","title":"Erreur de permissions Python","text":"<p>Si vous rencontrez des erreurs de permissions, utilisez uv qui g\u00e8re automatiquement l'environnement virtuel :</p> <pre><code>uv sync --reinstall\n</code></pre>"},{"location":"getting-started/installation/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<ul> <li>Configuration : Configurer les variables d'environnement</li> <li>Docker : Utiliser Docker pour le d\u00e9veloppement</li> </ul>"}]}